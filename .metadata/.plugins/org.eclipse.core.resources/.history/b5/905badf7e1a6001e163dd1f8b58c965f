package com.kh.boot.contact.controller;
 
import java.nio.charset.Charset;
import java.util.List;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity; 
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
 
import com.kh.boot.contact.model.service.ContactService;
import com.kh.boot.contact.model.vo.ContactHistory;
import com.kh.boot.contact.model.vo.ContactSource; 

import lombok.RequiredArgsConstructor;

@RestController // JSON을 리턴하는 웹 서비스임을 명시
@CrossOrigin("*") //
@RequestMapping("/contact")
@RequiredArgsConstructor 
public class ContactController {
	
	private final ContactService contactService;

	// ResponseEntity : HTTP의 responseBody + status + header 모두 조작하고 싶을 때 사용
	// ResponseDTO : HTTP responseBody만 조작
	@GetMapping
	public ResponseEntity<List<ContactSource>> selectSourceList(){ 
		List<ContactSource> sourceList = contactService.selectSourceList();
		HttpHeaders header = new HttpHeaders();
		header.setContentType(new MediaType("application", "json", Charset.forName("UTF-8")));
		return new ResponseEntity<List<ContactSource>>(sourceList, header, HttpStatus.OK);
	}
	
	// 연락처 세부조회 
	@GetMapping("/{contactName}")
	public ResponseEntity<ContactSource> selectSource(@PathVariable(name="contactName")String contactName){
		ContactSource source= contactService.selectSource(contactName);
		HttpHeaders header = new HttpHeaders();
		header.setContentType(new MediaType("application", "json", Charset.forName("UTF-8")));
		return new ResponseEntity<ContactSource>(source, header, HttpStatus.OK);
	}


	
	// 연락처 추가
	@PostMapping
	public ResponseEntity<String>insertSource(@RequestBody ContactSource contactSource){
		String insert = contactService.insertSource(contactSource) != 0 ? "success" : "fail";
		HttpHeaders header = new HttpHeaders();
		header.setContentType(new MediaType("text", "html", Charset.forName("UTF-8")));
		return new ResponseEntity<String>(insert, header, HttpStatus.OK);
	}

	
	// 연락처 삭제
	@DeleteMapping("/{contactName}")
	public ResponseEntity<String>deleteSource(@PathVariable(name="contactName")String contactName){
		String delete = contactService.deleteSource(contactName) != 0 ? "success" : "fail";
		HttpHeaders header = new HttpHeaders();
		header.setContentType(new MediaType("text", "html", Charset.forName("UTF-8")));
		return new ResponseEntity<String>(delete, header, HttpStatus.OK);
	}
	
	
	//연락기록전체조회
	@GetMapping("/history/{contactName}")
	public ResponseEntity<List<ContactHistory>> selectHistoryList(@PathVariable(name="contactName")String contactName){
		//System.out.println(contactName);
		List<ContactHistory> historyList = contactService.selectHistoryList(contactName);
		HttpHeaders header = new HttpHeaders();
		header.setContentType(new MediaType("application", "json", Charset.forName("UTF-8")));
		return new ResponseEntity<List<ContactHistory>>(historyList, header, HttpStatus.OK);
	}
	
	// 연락기록 추가  +  곧바로 해당인물의 lastDate를 업데이트 

	@PostMapping("/history/{contactName}")
	public ResponseEntity<String>insertHistory(
												@RequestBody ContactHistory contactHistory,
												@PathVariable(name="contactName")String contactName){
		/*
		ContactHistory contactHistory = null;
		contactHistory.setContactName(contactName);
		contactHistory.setContactContent(contactContent);
		System.out.println(contactHistory);
		*/
		
		String insert = contactService.insertHistory(contactHistory) != 0 ? "success" : "fail";
		HttpHeaders header = new HttpHeaders();
		header.setContentType(new MediaType("text", "html", Charset.forName("UTF-8")));
		return new ResponseEntity<String>(insert, header, HttpStatus.OK);
	}
	

	
	/*
	// 모든 연락기록만 조회
	@GetMapping
	public ResponseEntity<List<ContactHistory>> selectHistoryList(String contactName){ 
		List<ContactHistory> historyList = contactService.selectHistoryList(contactName);
		HttpHeaders header = new HttpHeaders();
		header.setContentType(new MediaType("application", "json", Charset.forName("UTF-8")));
		return new ResponseEntity<List<ContactHistory>>(historyList, header, HttpStatus.OK);
	}
	
	
	// 특정 연락기록만 조회 
	@GetMapping("/{contactNo}")
	public ResponseEntity<ContactHistory> selectHistory(@PathVariable(name="contactNo")int contactNo){
		ContactHistory history= contactService.selectHistory(contactNo);
		HttpHeaders header = new HttpHeaders();
		header.setContentType(new MediaType("application", "json", Charset.forName("UTF-8")));
		return new ResponseEntity<ContactHistory>(history, header, HttpStatus.OK);
	}
	
	// 연락기록 추가  +  곧바로 해당인물의 lastDate를 업데이트 
	@PostMapping
	public ResponseEntity<String>insertHistory(@RequestBody ContactHistory contactHistory){
		String insert = contactService.insertHistory(contactHistory) != 0 ? "success" : "fail";
		HttpHeaders header = new HttpHeaders();
		header.setContentType(new MediaType("text", "html", Charset.forName("UTF-8")));
		return new ResponseEntity<String>(insert, header, HttpStatus.OK);
	}
	
	// 연락기록 수정 *****************************************************
	@PutMapping
	public ResponseEntity<String>updateHistory(@RequestBody ContactHistory contactHistory){
		String update = contactService.updateHistory(contactHistory) != 0 ? "success" : "fail";
		HttpHeaders header = new HttpHeaders();
		header.setContentType(new MediaType("text", "html", Charset.forName("UTF-8")));
		return new ResponseEntity<String>(update, header, HttpStatus.OK);
	}
	
	// 연락기록 삭제
	@DeleteMapping("/{contactNo}")
	public ResponseEntity<String>deleteHistory(@PathVariable(name="contactNo")int contactNo){
		String delete = contactService.deleteHistory(contactNo) != 0 ? "success" : "fail";
		HttpHeaders header = new HttpHeaders();
		header.setContentType(new MediaType("text", "html", Charset.forName("UTF-8")));
		return new ResponseEntity<String>(delete, header, HttpStatus.OK);
	}
	
	// 특정인물의 모든 연락기록 삭제
	@DeleteMapping("/{contactName}")
	public ResponseEntity<String>deleteAllHistory(@PathVariable(name="contactName")String contactName){
		String deleteAll = contactService.deleteAllHistory(contactName) != 0 ? "success" : "fail";
		HttpHeaders header = new HttpHeaders();
		header.setContentType(new MediaType("text", "html", Charset.forName("UTF-8")));
		return new ResponseEntity<String>(deleteAll, header, HttpStatus.OK);
	}*/
	
		
	

}